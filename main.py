import streamlit as st
from functions.git_helpers import extract_github_file, update_skeleton_with_api_doc
# from functions.flask_parser import generate_openapi_spec
# from functions.langchain_helpers import write_docs
from functions.general_helpers import findAllFilePaths, extractAPIFunctions
from functions.llm_functions import gemma_send
from collections import defaultdict
from dotenv import load_dotenv
from io import BytesIO
import base64
import json
import os


# caching returned data
paths = ["./example_APIs/flask_api.py","./functions/flask_parser.py","./functions/git_helpers.py","./functions/langchain_helpers.py","./main.py"]
all_apis = {"flask_api.py":["@app.route(\"/users\", methods=[\"GET\"])\ndef get_users():\n    \"\"\"\n    GET /users\n    Returns a list of all users.\n    \"\"\"\n    return jsonify({\"users\": users})\n\n","@app.route(\"/products\", methods=[\"GET\"])\ndef get_products():\n    \"\"\"\n    GET /products\n    Returns a list of all available products.\n    \"\"\"\n    return jsonify({\"products\": products})\n\n","@app.route(\"/transactions\", methods=[\"GET\"])\ndef get_transactions():\n    \"\"\"\n    GET /transactions\n    Optionally filters transactions by user_id if provided as a query parameter.\n    \"\"\"\n    user_id = request.args.get(\"user_id\", type=int)\n    if user_id:\n        filtered_transactions = [t for t in transactions if t[\"user_id\"] == user_id]\n        return jsonify({\"transactions\": filtered_transactions})\n    return jsonify({\"transactions\": transactions})\n\n","@app.route(\"/purchase\", methods=[\"POST\"])\ndef purchase_product():\n    \"\"\"\n    POST /purchase\n    Expects a JSON payload with the following keys:\n      - user_id: int\n      - product_id: int\n      - quantity: int (default is 1)\n      - discount_rate: float (optional, default is 0)\n    \n    Handles product purchase, applies discount if provided, deducts balance from the user,\n    and records the transaction.\n    \"\"\"\n    data = request.get_json()\n    if not data:\n        return jsonify({\"error\": \"Invalid JSON payload\"}), 400\n\n    user_id = data.get(\"user_id\")\n    product_id = data.get(\"product_id\")\n    quantity = data.get(\"quantity\", 1)\n    discount_rate = data.get(\"discount_rate\", 0)\n\n    # Locate the user\n    user = next((u for u in users if u[\"id\"] == user_id), None)\n    if user is None:\n        return jsonify({\"error\": \"User not found\"}), 404\n\n    # Locate the product\n    product = next((p for p in products if p[\"id\"] == product_id), None)\n    if product is None:\n        return jsonify({\"error\": \"Product not found\"}), 404\n\n    # Calculate the total price after discount\n    discounted_price = calculate_discounted_price(product[\"price\"], discount_rate)\n    total_price = discounted_price * quantity\n\n    # Verify sufficient balance\n    if user[\"balance\"] < total_price:\n        return jsonify({\"error\": \"Insufficient balance\"}), 400\n\n    # Deduct the balance and record the transaction\n    user[\"balance\"] -= total_price\n    transaction = record_transaction(user_id, product_id, quantity, total_price)\n\n    return jsonify({\n        \"message\": \"Purchase successful\",\n        \"transaction\": transaction,\n        \"new_balance\": user[\"balance\"]\n    }), 200\n\n","@app.route(\"/recharge\", methods=[\"POST\"])\ndef recharge_account():\n    \"\"\"\n    POST /recharge\n    Expects a JSON payload:\n      - user_id: int\n      - amount: float\n    Adds the specified amount to the user's balance.\n    \"\"\"\n    data = request.get_json()\n    if not data:\n        return jsonify({\"error\": \"Invalid JSON payload\"}), 400\n\n    user_id = data.get(\"user_id\")\n    amount = data.get(\"amount\", 0)\n\n    # Locate the user\n    user = next((u for u in users if u[\"id\"] == user_id), None)\n    if user is None:\n        return jsonify({\"error\": \"User not found\"}), 404\n\n    user[\"balance\"] += amount\n    return jsonify({\n        \"message\": \"Recharge successful\",\n        \"new_balance\": user[\"balance\"]\n    }), 200\n\n# --- Additional Business Logic Endpoint ---\n\n","@app.route(\"/summary\", methods=[\"GET\"])\ndef summary():\n    \"\"\"\n    GET /summary\n    Provides a summary report that includes:\n      - Total number of users\n      - Total number of transactions\n      - Total revenue from transactions\n    \"\"\"\n    total_users = len(users)\n    total_transactions = len(transactions)\n    total_revenue = sum(t[\"total_price\"] for t in transactions)\n    report = {\n        \"total_users\": total_users,\n        \"total_transactions\": total_transactions,\n        \"total_revenue\": round(total_revenue, 2)\n    }\n    return jsonify(report)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n"],"flask_parser.py":[],"git_helpers.py":[],"langchain_helpers.py":[],"main.py":[]}
route_names = {"flask_api.py":["users","products","transactions","purchase","recharge","summary"],"flask_parser.py":[],"git_helpers.py":[],"langchain_helpers.py":[],"main.py":[]}
api_documentation = {"users":"import React from 'react'\n\nconst Users = () => {\n  return (\n    <div style={{ fontFamily: 'Inter, sans-serif', lineHeight: '1.6', color: '#18181b' }}>\n      <div style={{ marginBottom: '1.5rem' }}>\n        <h2 style={{ fontSize: '1.75rem', fontWeight: '700', marginBottom: '0.5rem' }}>Get Users</h2>\n        <p style={{ fontSize: '0.875rem', color: '#71717a' }}>Fetches a list of all users.</p>\n      </div>\n      <div style={{ marginBottom: '1rem' }}>\n        <h3 style={{ fontSize: '1.125rem', fontWeight: '600', marginBottom: '0.5rem' }}>Endpoint</h3>\n        <p style={{ fontSize: '0.875rem', fontFamily: 'Menlo, monospace', backgroundColor: '#f4f4f5', padding: '0.25rem 0.5rem', borderRadius: '0.25rem', display: 'inline-block' }}>\n          GET <span style={{ fontWeight: '500', color: '#0070f3' }}>/users</span>\n        </p>\n      </div>\n      <div style={{ marginBottom: '1rem' }}>\n        <h3 style={{ fontSize: '1.125rem', fontWeight: '600', marginBottom: '0.5rem' }}>Response</h3>\n        <div>\n          <h4 style={{ fontSize: '1rem', fontWeight: '500', marginBottom: '0.25rem' }}>Status Codes</h4>\n          <ul style={{ fontSize: '0.875rem', listStyleType: 'disc', marginLeft: '1.25rem', marginBottom: '0.75rem' }}>\n            <li>\n              <span style={{ fontWeight: '600' }}>200 OK</span> â€“ Successful response.\n            </li>\n          </ul>\n        </div>\n        <div>\n          <h4 style={{ fontSize: '1rem', fontWeight: '500', marginBottom: '0.25rem' }}>Response Body</h4>\n          <pre style={{ backgroundColor: '#f4f4f5', padding: '0.75rem', borderRadius: '0.25rem', overflowX: 'auto', fontSize: '0.875rem' }}>\n            <code style={{ fontFamily: 'Menlo, monospace' }}>\n              {`{\n  \"users\": [\n    {\n      \"id\": 1,\n      \"name\": \"John Doe\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Jane Doe\"\n    }\n  ]\n}`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Users","products":"import React from 'react';\n\nconst Products = () => {\n  return (\n    <div>\n      <section className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold tracking-tight\">Products</h1>\n        <p className=\"text-muted-foreground\">\n          Fetches and displays a list of products from the API endpoint.\n        </p>\n      </section>\n      <section className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold tracking-tight mb-4\">API Endpoint</h2>\n        <div className=\"rounded-md border bg-muted p-4\">\n          <div className=\"font-semibold text-sm\">Method</div>\n          <div className=\"text-base font-medium\">GET</div>\n          <div className=\"mt-2 font-semibold text-sm\">Endpoint</div>\n          <div className=\"text-base font-medium\"><code className=\"bg-zinc-100 rounded px-1 py-0.5 font-mono text-sm\">/products</code></div>\n          <div className=\"mt-2 font-semibold text-sm\">Description</div>\n          <div className=\"text-base font-medium\">Returns a list of all available products.</div>\n        </div>\n      </section>\n      <section className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold tracking-tight mb-4\">Response</h2>\n        <div className=\"rounded-md border bg-muted p-4\">\n          <div className=\"font-semibold text-sm\">Status Code</div>\n          <div className=\"text-base font-medium\">200 OK</div>\n          <div className=\"mt-2 font-semibold text-sm\">Content Type</div>\n          <div className=\"text-base font-medium\"><code>application/json</code></div>\n          <div className=\"mt-2 font-semibold text-sm\">Body</div>\n          <pre className=\"mt-2 rounded-md bg-zinc-100 p-2 text-sm font-mono overflow-x-auto\">\n            <code>\n              {`{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"name\": \"Product A\",\n      \"description\": \"Description of Product A\",\n      \"price\": 19.99\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Product B\",\n      \"description\": \"Description of Product B\",\n      \"price\": 29.99\n    },\n    ...\n  ]\n}`}\n            </code>\n          </pre>\n        </div>\n      </section>\n      <section className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold tracking-tight mb-4\">Usage</h2>\n        <div className=\"rounded-md border bg-muted p-4\">\n          <div className=\"font-semibold text-sm\">React Component</div>\n          <pre className=\"mt-2 rounded-md bg-zinc-100 p-2 text-sm font-mono overflow-x-auto\">\n            <code>\n              {`import Products from './Products';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Product List</h1>\n      <Products />\n    </div>\n  );\n};\n\nexport default App;\n`}\n            </code>\n          </pre>\n          <div className=\"mt-4 text-sm text-muted-foreground\">\n            Note: This <code>Products</code> component is for documentation purposes and does not include actual data fetching logic. You would typically use <code>fetch</code> or a library like <code>axios</code> to retrieve data from the <code>/products</code> endpoint and update the component's state to display the products.\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Products;","transactions":"Transactions\n\nFetches and displays transaction data from the `/transactions` API endpoint. This documentation describes the API used to retrieve transaction information for use within a React application.\n\nAPI Endpoint\n\nGET `/transactions`\n\nOptional Parameters\n\n`user_id`: `number`\n  Filters transactions by a specific user ID. If not provided, all transactions are returned.\n\nResponse Body\n\n```json\n{\n  \"transactions\": [\n    {\n      \"id\": 1,\n      \"userId\": 123,\n      \"amount\": 150.00,\n      \"date\": \"2023-10-26T12:00:00Z\",\n      \"description\": \"Online payment\",\n      \"status\": \"completed\"\n    },\n    ...\n  ]\n}\n```\n\nUsage\n\nTo fetch all transactions:\n\n```js\nfetch('/transactions')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data.transactions);\n  });\n```\n\nTo fetch transactions for a specific user:\n\n```js\nfetch('/transactions?user_id=456')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data.transactions);\n  });\n```\n\nComponent Export\n\nThis API documentation is for a conceptual React component named `Transactions` that would use this API endpoint. It would be exported as the default export:\n\n```jsx\n// Transactions.tsx (Conceptual - not provided)\nconst Transactions = () => {\n  // ... component logic to fetch and display transactions ...\n}\n\nexport default Transactions;\n```","purchase":"function Purchase() {\n  return (\n    <>\n      <h2>/purchase</h2>\n      <p>\n        <strong>POST</strong>\n      </p>\n      <p>\n        Handles product purchase, applies discount if provided, deducts balance from the user, and records the transaction.\n      </p>\n\n      <h3>Request Body</h3>\n      <p>\n        Expects a JSON payload with the following keys:\n      </p>\n      <table>\n        <thead>\n          <tr>\n            <th>Field</th>\n            <th>Type</th>\n            <th>Description</th>\n            <th>Required</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td><code>user_id</code></td>\n            <td><code>integer</code></td>\n            <td>The ID of the user making the purchase.</td>\n            <td>Yes</td>\n          </tr>\n          <tr>\n            <td><code>product_id</code></td>\n            <td><code>integer</code></td>\n            <td>The ID of the product being purchased.</td>\n            <td>Yes</td>\n          </tr>\n          <tr>\n            <td><code>quantity</code></td>\n            <td><code>integer</code></td>\n            <td>The quantity of the product to purchase.</td>\n            <td>No</td>\n          </tr>\n          <tr>\n            <td><code>discount_rate</code></td>\n            <td><code>number</code></td>\n            <td>The discount rate to apply to the product price (e.g., 0.1 for 10%).</td>\n            <td>No</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h3>Response</h3>\n\n      <h4>Success Response (200 OK)</h4>\n      <p>\n        Returns a JSON response with details of the successful purchase.\n      </p>\n      <p>\n        <strong>Body:</strong>\n      </p>\n      <pre>\n        <code>\n{\n  \"message\": \"Purchase successful\",\n  \"transaction\": {\n    // Transaction details object (implementation-specific)\n    // ...\n  },\n  \"new_balance\": 1234 // Updated user balance\n}\n        </code>\n      </pre>\n\n      <h4>Error Responses</h4>\n\n      <h5>400 Bad Request</h5>\n      <p>\n        Returned if the request body is not valid JSON or if the user has insufficient balance.\n      </p>\n      <p>\n        <strong>Body (Invalid JSON):</strong>\n      </p>\n      <pre>\n        <code>\n{\n  \"error\": \"Invalid JSON payload\"\n}\n        </code>\n      </pre>\n      <p>\n        <strong>Body (Insufficient balance):</strong>\n      </p>\n      <pre>\n        <code>\n{\n  \"error\": \"Insufficient balance\"\n}\n        </code>\n      </pre>\n\n      <h5>404 Not Found</h5>\n      <p>\n        Returned if the user or product with the provided IDs are not found.\n      </p>\n      <p>\n        <strong>Body (User not found):</strong>\n      </p>\n      <pre>\n        <code>\n{\n  \"error\": \"User not found\"\n}\n        </code>\n      </pre>\n      <p>\n        <strong>Body (Product not found):</strong>\n      </p>\n      <pre>\n        <code>\n{\n  \"error\": \"Product not found\"\n}\n        </code>\n      </pre>\n    </>\n  );\n}\n\nexport default Purchase;","recharge":"```jsx\nimport React from 'react';\n\nconst Recharge = () => {\n  return (\n    <div className=\"api-doc\">\n      <h2 className=\"api-doc-title\">/recharge</h2>\n      <p className=\"api-doc-method post\">POST</p>\n      <p className=\"api-doc-description\">Adds the specified amount to the user's balance.</p>\n\n      <h3 className=\"api-doc-section-title\">Request Body</h3>\n      <p className=\"api-doc-body\">Expects a JSON payload with the following fields:</p>\n      <ul className=\"api-doc-list\">\n        <li className=\"api-doc-list-item\">\n          <span className=\"api-doc-field\">user_id</span> <span className=\"api-doc-type\">integer</span>\n          <p className=\"api-doc-field-description\">The ID of the user to recharge.</p>\n        </li>\n        <li className=\"api-doc-list-item\">\n          <span className=\"api-doc-field\">amount</span> <span className=\"api-doc-type\">float</span>\n          <p className=\"api-doc-field-description\">The amount to add to the user's balance.</p>\n        </li>\n      </ul>\n\n      <h3 className=\"api-doc-section-title\">Responses</h3>\n\n      <div className=\"api-doc-response\">\n        <h4 className=\"api-doc-response-code success\">200 OK</h4>\n        <p className=\"api-doc-response-description\">Successful recharge.</p>\n        <pre className=\"api-doc-response-example\">\n          <code>\n            {`{\n  \"message\": \"Recharge successful\",\n  \"new_balance\": 150.0\n}`}\n          </code>\n        </pre>\n      </div>\n\n      <div className=\"api-doc-response\">\n        <h4 className=\"api-doc-response-code error\">400 Bad Request</h4>\n        <p className=\"api-doc-response-description\">Invalid JSON payload.</p>\n        <pre className=\"api-doc-response-example\">\n          <code>\n            {`{\n  \"error\": \"Invalid JSON payload\"\n}`}\n          </code>\n        </pre>\n      </div>\n\n      <div className=\"api-doc-response\">\n        <h4 className=\"api-doc-response-code error\">404 Not Found</h4>\n        <p className=\"api-doc-response-description\">User not found.</p>\n        <pre className=\"api-doc-response-example\">\n          <code>\n            {`{\n  \"error\": \"User not found\"\n}`}\n          </code>\n        </pre>\n      </div>\n    </div>\n  );\n};\n\nexport default Recharge;\n```","summary":"import React, { useState, useEffect } from 'react';\n\nconst Summary = () => {\n  const [summaryData, setSummaryData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch('/summary');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const json = await response.json();\n        setSummaryData(json);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  if (loading) {\n    return <div>Loading summary data...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (!summaryData) {\n    return null;\n  }\n\n  return (\n    <div className=\"container\">\n      <section className=\"api-section\">\n        <h2 className=\"api-heading\">/summary</h2>\n        <p className=\"api-description\">\n          Provides a summary report with key metrics.\n        </p>\n      </section>\n\n      <section className=\"request-section\">\n        <h3 className=\"section-heading\">Request</h3>\n        <p>\n          <code className=\"api-method\">GET</code>\n          <code className=\"api-path\">/summary</code>\n        </p>\n      </section>\n\n      <section className=\"response-section\">\n        <h3 className=\"section-heading\">Response</h3>\n        <p>\n          <code className=\"api-code\">200 OK</code>\n        </p>\n        <p className=\"response-description\">\n          On success, the API returns a JSON response with the following structure:\n        </p>\n        <pre className=\"response-body\">\n          <code className=\"language-json\">\n            {JSON.stringify(\n              {\n                total_users: summaryData.total_users,\n                total_transactions: summaryData.total_transactions,\n                total_revenue: summaryData.total_revenue,\n              },\n              null,\n              2\n            )}\n          </code>\n        </pre>\n        <div className=\"response-fields\">\n          <h4 className=\"fields-heading\">Fields</h4>\n          <ul className=\"fields-list\">\n            <li className=\"field-item\">\n              <code className=\"field-name\">total_users</code>\n              <p className=\"field-description\">Total number of users.</p>\n            </li>\n            <li className=\"field-item\">\n              <code className=\"field-name\">total_transactions</code>\n              <p className=\"field-description\">Total number of transactions.</p>\n            </li>\n            <li className=\"field-item\">\n              <code className=\"field-name\">total_revenue</code>\n              <p className=\"field-description\">Total revenue from transactions.</p>\n            </li>\n          </ul>\n        </div>\n      </section>\n\n      <style jsx>{`\n        .container {\n          font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n          color: #0f172a;\n        }\n\n        .api-section {\n          margin-bottom: 2rem;\n        }\n\n        .api-heading {\n          font-size: 1.875rem;\n          line-height: 2.25rem;\n          font-weight: 700;\n          letter-spacing: -0.025em;\n          color: #0f172a;\n          margin-bottom: 0.5rem;\n        }\n\n        .api-description {\n          color: #475569;\n          line-height: 1.5rem;\n        }\n\n        .section-heading {\n          font-size: 1.25rem;\n          line-height: 1.75rem;\n          font-weight: 600;\n          margin-bottom: 1rem;\n          margin-top: 2rem;\n        }\n\n        .api-method {\n          padding: 0.25rem 0.5rem;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 600;\n          border-radius: 0.25rem;\n          background-color: #f0f0f0;\n          color: #0f172a;\n          margin-right: 0.5rem;\n        }\n\n        .api-path {\n          padding: 0.25rem 0.5rem;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 500;\n          border-radius: 0.25rem;\n          background-color: #e5e7eb;\n          color: #0f172a;\n        }\n\n        .api-code {\n          padding: 0.25rem 0.5rem;\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 600;\n          border-radius: 0.25rem;\n          background-color: #f0f0f0;\n          color: #0f172a;\n          margin-right: 0.5rem;\n        }\n\n\n        .response-description {\n          color: #475569;\n          line-height: 1.5rem;\n          margin-bottom: 1rem;\n        }\n\n        .response-body {\n          background-color: #f7f7f7;\n          border-radius: 0.375rem;\n          padding: 1rem;\n          overflow-x: auto;\n          margin-bottom: 1rem;\n        }\n\n        .language-json {\n          font-family: monospace;\n          font-size: 0.875rem;\n          line-height: 1.4rem;\n          color: #0f172a;\n          white-space: pre-wrap;\n        }\n\n        .response-fields {\n          margin-top: 1rem;\n        }\n\n        .fields-heading {\n          font-size: 1rem;\n          line-height: 1.5rem;\n          font-weight: 600;\n          margin-bottom: 0.75rem;\n        }\n\n        .fields-list {\n          list-style: none;\n          padding: 0;\n        }\n\n        .field-item {\n          margin-bottom: 0.75rem;\n        }\n\n        .field-name {\n          font-size: 0.875rem;\n          line-height: 1.25rem;\n          font-weight: 600;\n          color: #0f172a;\n          margin-right: 0.5rem;\n        }\n\n        .field-description {\n          color: #475569;\n          line-height: 1.5rem;\n          display: inline-block;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Summary;"}

st.set_page_config(layout="wide")
st.image("/Users/samsolano/Desktop/  /dev-scribe/Tyler-Devscribe-Backend/devscribe-v1/design_resources/logo-white.svg", width=200)
load_dotenv()
github_token = os.getenv("GITHUB_TOKEN")

owner = st.text_input("Repository owner", value="tkim516")
repo = st.text_input("Repository name", value="devscribe-v1")
file_path = st.text_input("File path", value=".")
submit = st.button("Generate")

if submit:

#---------------------------------------------------------------Find All Paths----------------------------------------------------------------------------------------------
  
  # # Stores the path of all files in repo into "paths" variable that are the correct file type as defined in "file_types"
  # root_directory = extract_github_file(owner, repo, file_path, github_token)
  # paths = []
  # file_types = [".py"]
  # current_path = "."
  # findAllFilePaths(paths, current_path, root_directory, file_types, owner, repo, github_token)
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#---------------------------------------------------------------Get All Source Code-----------------------------------------------------------------------------------------

  # # Get all source code from all file paths in "paths" and store into "all_source_code"
  # all_source_code = {}

  # for path in paths:
  #   file_data = extract_github_file(owner, repo, path, github_token)
  #   file_content = base64.b64decode(file_data["content"])  # Decode base64 content
  #   file_content = BytesIO(file_content).read().decode()
  #   # all_source_code += f"file {file_counter}, {file_data['name']}:\n{file_content}\n\n"
  #   all_source_code[file_data['name']] = file_content

  # all_apis = {}
  # route_names = {}    # dictionary of file with route of apis {"file.py": ["route1", "route2"]}
  # route = ""
  # for file in all_source_code:
  #   all_apis[file], route_names[file] = extractAPIFunctions(all_source_code[file])
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


#-----------------------------------------------------Create Docs for all APIs---------------------------------------------------------------------------------------------------------------------

  # Send all created API code with names one at a time to llm and have it create formatted html page for API doc
  api_documentation = {}

  for file in all_apis:
    if len(all_apis[file]) == 0:
        continue
    for i in range(len(all_apis[file])):
      api = all_apis[file][i]
      route = route_names[file][i]

      response = gemma_send(api, route.capitalize())
      response = response["candidates"][0]["content"]["parts"][0]["text"]
      api_documentation[route] = response
  st.write(api_documentation)
#--------------------------------------------------------------------------------------------------------------------------------------------------------------------------



  # for i, route in enumerate(api_documentation):
    # if i == 4:

  for route in api_documentation:
    
    st.write(route)
    filename = f"{route.capitalize()}.tsx"
    commit_message = f"added {route.capitalize()} doc"
    skeleton_git_url = "https://github.com/samsolano/v1_doc_skeleton_4-5"


    update_skeleton_with_api_doc(skeleton_git_url, api_documentation[route], filename, route.capitalize(), commit_message)



